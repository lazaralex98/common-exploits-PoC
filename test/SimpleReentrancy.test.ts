import { SignerWithAddress } from '@nomiclabs/hardhat-ethers/signers';
import { expect } from 'chai';
import { formatEther, parseEther } from 'ethers/lib/utils';
import hre, { ethers } from 'hardhat';
import { Attacker, Target } from '../typechain-types';

describe('SimpleReentrancy', function () {
  let addrs: SignerWithAddress[];
  let target: Target;
  let attacker: Attacker;

  before(async function () {
    addrs = await ethers.getSigners();

    // deploy target
    const TargetFactory = await hre.ethers.getContractFactory('Target');
    target = await TargetFactory.deploy();
    await target.deployed();

    // send ETH to target
    await target.connect(addrs[0]).deposit({ value: parseEther('100') });
    expect(
      formatEther(await ethers.provider.getBalance(target.address)),
      `Target should have 100.0 ETH.`
    ).to.equal('100.0');

    // deploy attacker
    const AttackerFactory = await hre.ethers.getContractFactory('Attacker');
    attacker = await AttackerFactory.deploy(target.address);
    await attacker.deployed();
  });

  it('Should drain 100 ETH from target', async function () {
    // deposit ETH via attacker to target (so the attacker has a balance)
    await attacker.deposit({ value: parseEther('1') });

    expect(
      formatEther(await ethers.provider.getBalance(target.address)),
      `Target should have 101.0 ETH.`
    ).to.equal('101.0');
    expect(
      formatEther(await target.balances(attacker.address)),
      `Attacker should have 1.0 ETH within target contract.`
    ).to.equal('1.0');

    // drain ETH from target via attacker using a simple reentrancy attack
    await attacker.attack();

    expect(
      formatEther(await ethers.provider.getBalance(target.address)),
      `Target should have 0.0 ETH.`
    ).to.equal('0.0');
    expect(
      formatEther(await ethers.provider.getBalance(attacker.address)),
      `Attacker should have 101.0 ETH.`
    ).to.equal('101.0');
  });
});
